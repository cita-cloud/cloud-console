name: Publish Release

on:
  push:
    branches:
      - master
      - main
      - 'v*'
  workflow_dispatch:

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  PROTOC_NO_VENDOR: 1

jobs:
  publish-release:
    name: Publish Release
    env:
      BINARY_NAME: console_dylib
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, win-msvc, macos, macos-arm]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: linux-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - build: win-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 8
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: release-candidate
      
      - name: Execute Gradle build
        run: gradle build --project-dir java_lib -x test

      - name: Build archive
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ${{ env.BINARY_NAME }}-${{ matrix.target }}.zip $PWD/target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.dll $PWD/java_lib/console/build/libs/
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            tar cvf ${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release lib${{ env.BINARY_NAME }}.so
            tar rvf ${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz -C java_lib/console/build/libs console-0.0.1.jar
          else
            tar cvf ${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release lib${{ env.BINARY_NAME }}.dylib
            tar rvf ${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz -C java_lib/console/build/libs console-0.0.1.jar
          fi
      
      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.BINARY_NAME }}-${{ matrix.target }}.zip
            ${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz
